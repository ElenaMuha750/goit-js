// –ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç–∏–µ 3. –ú–∞—Å—Å–∏–≤—ã

// Example 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º
// –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ genres —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
// –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
// –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—å—Ç–µ ¬´Country¬ª –∏ ¬´Reggy¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.
// const genres = ;

// Example 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π values –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// const values = '8 11';

// Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// Example 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö names –∏ phones —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.

// const names = 'Jacob,William,Solomon,Artemis';
// const phones = '89001234567,89001112233,890055566377,890055566300';

// Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.

// const string = 'Welcome to the future';

// Example 6 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';

// Example 7 - –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

// const numbers = [2, 17, 94, 1, 23, 37];
// let min;
// console.log(min); // 1

//--------------------------------------------------------

// * Example 1
const genres = ['Jazz', 'Blues'];
genres.push('–†–æ–∫-–Ω-—Ä–æ–ª–ª');
// console.log(genres[0])
const lastElIndex = genres.length - 1;
// console.log(genres[lastElIndex])
const firstDeletedEl = genres.shift();
// console.log(firstDeletedEl)
genres.unshift('Country', 'Reggy');

// genres.splice(0, 1, "New 1", "New 2")
// console.log(genres)

// * Example 2
const values = '8 11';
const arrNums = values.split(' ');
const sq = Number(arrNums[0]) * Number(arrNums[1]);
// console.log(sq)

// * Example 3
const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i += 1) {
//     // console.log(i + 1, ':', fruits[i])
//     console.log(`${i + 1} : ${fruits[i]}`)
// }

// * Example 4
const names = 'Jacob,William,Solomon,Artemis';
const phones = '89001234567,89001112233,890055566377,890055566300';

const namesArray = names.split(',');
const phonesArray = phones.split(',');

// for (let i = 0; i < namesArray.length; i += 1) {
//     const fullString = `${namesArray[i]}: ${phonesArray[i]}`
//     console.log(fullString)
// }

// * Example 5
const string = 'Welcome to the future';
const stringArray = string.split(' ');

// stringArray.shift()
// stringArray.pop()

// console.log(stringArray.slice(1, -1).join(' '))

// console.log(stringArray)
// console.log(stringArray.join(' '))

// * Example 6
let revercedString = '';
for (let i = string.length - 1; i >= 0; i -= 1) {
  revercedString += string[i];
}

// console.log(revercedString)

let secondVariant = string.split('').reverse().join('');

// * Example 7
// const numbers = [2, 17, 94, 1, 23, 37];
// let min = numbers[numbers.length - 1];

// for (let i = 0; i < numbers.length ; i += 1) {
//     if (numbers[i] < min) {
//         min = numbers[i]
//     }
// }

// console.log(min); // 1

const numbers = [51, 18, 13, 24, 7, 85, 19];
let smallestNumber = numbers[0];

// for (const number of numbers) {
//     console.log('number:', number, 'smallestNumber', smallestNumber)
//   if (number < smallestNumber) {
//     smallestNumber = number;
//   }
// }

// console.log('smallestNumber: ', smallestNumber);
// console.log(Math.min(...numbers))

// let oneElement
// let arr = []

// for (let i = 0; i < fruits.length; i += 1) {
//     oneElement = fruits[i]
//     console.log(fruits[i])
//     arr.push(fruits[i]  + ':)')
// }

// console.log(arr)

let sum = 0;

for (const number of numbers) {
  console.log('number:', number, 'smallestNumber', smallestNumber);
  sum += number;
}

console.log(sum);
